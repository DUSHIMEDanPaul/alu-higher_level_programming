import unittest

def text_indentation(text):
    if not isinstance(text, str):
        raise TypeError("text must be a string")
    
    special_chars = ['.', '?', ':']
    for char in special_chars:
        text = text.replace(char, char + '\n\n')
    
    lines = text.split('\n')
    lines = [line.strip() for line in lines]
    text = '\n'.join(lines)
    
    return text

class TestTextIndentation(unittest.TestCase):
    def test_string_input(self):
        self.assertEqual(text_indentation("Holberton School"), "Holberton School")
        self.assertEqual(text_indentation("Holberton.School"), "Holberton.\n\nSchool")
        self.assertEqual(text_indentation("Holberton. School? How are you: John"), "Holberton.\n\nSchool?\n\nHow are you:\n\nJohn")

    def test_non_string_input(self):
        with self.assertRaises(TypeError):
            text_indentation(12)

    def test_string_with_blank_line(self):
        self.assertEqual(text_indentation("Hello\n\nWorld"), "Hello\n\nWorld")

    def test_missing_argument(self):
        with self.assertRaises(TypeError):
            text_indentation()

if __name__ == '__main__':
    unittest.main()

